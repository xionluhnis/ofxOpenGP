/*!
\page tutorial Surface_mesh Tutorial

\tableofcontents

\section surface_mesh_intro Introduction

In general, a polygonal surface mesh is composed of vertices, edges and
faces as well as the incidence relationships between them. Surface_mesh
stores the connectivity information based on halfedges, i.e. pairs of
directed edges with opposing direction. To be more precise:

<ul>
  <li>Each vertex stores an outgoing halfedge.</li>
  <li>Each face stores an incident halfedge.</li>
  <li>Each halfedge stores its incident face, its target vertex, and its
    previous and next halfedges within the face.</li>
</ul>

The halfedge connectivity is illustrated in the figure below:

\image html halfedge-connectivity.png "Halfedge connectivity."



\section surface_mesh_usage Usage

In the following sections we describe the basic usage of Surface_mesh by
means of simple example programs and code excerpts.


\subsection surface_mesh_basics Basics

The very basic usage of Surface_mesh is demonstrated in the example
below. The program first instantiates a Surface_mesh object as well as four
vertex handles. These handles, as well as the handles for the other mesh
entities <code>Halfedge</code>, <code>Edge</code>, and <code>Face</code>
are basically indices. Four vertices are added to the mesh, as well as four
triangular faces composing a tetrahedron. Finally, the number of vertices,
edges, and faces is printed to standard output.

\include surface_mesh_basics.cpp




\subsection surface_mesh_io File I/O

Surface_mesh currently supports reading OFF, OBJ, and STL files. Write
support is currently limited to OFF files. All I/O operations are handled
by the Surface_mesh::read() and Surface_mesh::write() member functions,
with the target file name being their only argument. An example is given
below.

\include surface_mesh_io.cpp


\subsection surface_mesh_iterators Iterators and Circulators

In order to sequentially access mesh entities Surface_mesh provides
iterators for each entity type, namely <code>Vertex_iterator</code>,
<code>Halfedge_iterator</code>, <code>Edge_iterator</code>, and
<code>Face_iterator</code>. Similar to iterators, Surface_mesh also
provides circulators for the ordered enumeration of all incident vertices,
halfedges, or faces around a given face or vertex. Since there is no clear
begin- and end-circulator, <code>do-while</code> loops are used for circulators. The
example below demonstrates the use of iterators and circulators for
computing the mean valence of a mesh.

\include surface_mesh_iterators.cpp


\subsection surface_mesh_properties Properties

Attaching additional attributes to mesh entities is important for many
applications. Surface_mesh supports properties by means of synchronized
arrays that can be (de-)allocated dynamically at run-time. Property arrays
are also used internally, e.g., to store vertex coordinates. The example
program below shows how to access vertex coordinates through the
(pre-defined) point property.

\include surface_mesh_barycenter.cpp

The dynamic (de-)allocation of properties at run-time is managed by a set
of four different functions:

<dl>
<dt>
<code>add_<em>EntityType</em>_property<<em>PropertyType</em>>(\"<em>PropertyName</em>\")</code>
</dt>
<dd>
Allocates a new property for the given <em>EntityType</em> of the type
<em>PropertyType</em> labeled by the <em>PropertyName</em> string.
<br>
<br>
</dd>
<dt>
<code>get_<em>EntityType</em>_property<<em>PropertyType</em>>(\"<em>PropertyName</em>\")</code>
</dt>
<dd>
Returns a handle to an existing property.
<br>
<br>
</dd>
<dt>
<code><em>EntityType</em>_property<<em>PropertyType</em>>(\"<em>PropertyName</em>\")</code>
</dt>
<dd>
Returns a handle to an existing property if the specified property already
exists. If not, a new property is allocated and its handle is returned.
<br>
<br>
</dd>
<dt>
<code>remove_<em>EntityType</em>_property(<em>PropertyHandle</em>)</code>
</dt>
<dd>
Removes and the vertex property referenced by <em>PropertyHandle</em>.
<br>
<br>
</dd>
</dl>

Functions that allocate a new property take a default value for the
property as an optional second argument.

The code excerpt below demonstrates how to allocate, use and remove a custom
edge property.

\code
Surface_mesh mesh;

// allocate property storing a point per edge
Surface_mesh::Edge_property<Point> edge_points = mesh.add_edge_property<Point>("property-name");

// access the edge property like an array
Surface_mesh::Edge e;
edge_points[e] = Point(x,y,z);

// remove property and free memory
mesh.remove_edge_property(edge_points);
\endcode


\subsection surface_mesh_connectivity_queries Connectivity Queries

Commonly used connectivity queries such as retrieving the next
halfedge or the target vertex of an halfedge are illustrated below.

<table class="modules">
<tr>
<td>
\code
Surface_mesh::Halfedge h;
Surface_mesh::Halfedge h0 = mesh.next_halfedge_handle(h);
Surface_mesh::Halfedge h1 = mesh.prev_halfedge_handle(h);
Surface_mesh::Halfedge h2 = mesh.opposite_halfedge_handle(h);
Surface_mesh::Face     f  = mesh.face_handle(h);
Surface_mesh::Vertex   v0 = mesh.from_vertex_handle(h);
Surface_mesh::Vertex   v1 = mesh.to_vertex_handle(h);
\endcode
</td>
<td>
\image html connectivity-queries.png
</td>
</tr>


\subsection surface_mesh_topology_operations Topological Operations

Surface mesh also offers higher-level topological operations, such as
performing edge flips, edge splits, face splits, or halfedge
collapses. The figure below illustrates some of these operations.

\image html topology-changes.png "High-level operations changing the topology."

The corresponding member functions and their syntax is demonstrated in the
pseudo-code below.

\code
Surface_mesh::Vertex   v;
Surface_mesh::Edge     e;
Surface_mesh::Halfedge h;
Surface_mesh::Face     f;

mesh.split(f, v);
mesh.split(e, v);
mesh.flip(e);
mesh.collapse(h);
\endcode

When entities are removed from the mesh due to topological changes, the
member function <code>garbage_collection()</code> has to be called in order
to ensure the consistency of the data structure.

*/